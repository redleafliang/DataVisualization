<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE en-export SYSTEM "http://xml.evernote.com/pub/evernote-export3.dtd">
<en-export export-date="20170525T062332Z" application="Evernote" version="Evernote Mac 6.11 (454876)">
<note><title>Force-directed graph drawing 读书笔记</title><content><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd">
<en-note><div><font style="font-size: 18px;">绘图用的JavaScript网站：</font></div><div><a href="https://d3js.org/">https://d3js.org/</a></div><div><font style="font-size: 24px;">purpose：</font></div><div>to position the <span style="background-color: rgb(255, 250, 165);-evernote-highlight:true;">nodes</span> of a graph in two-dimensional or three-dimensional space </div><div><span>    <span>    </span></span>so that all the <span style="background-color: rgb(255, 250, 165);-evernote-highlight:true;">edges</span> are of more or less <u>equal length</u> and there are as<u> few crossing</u> edges as possible, </div><div>by assigning forces among the set of edges and the set of nodes, based on their relative positions, and then using these forces </div><div><span>    <span>    </span></span>either to simulate the motion of the edges and nodes or to minimize their energy</div><div><br/></div><h2 style="text-align: start;"><span>Forces</span></h2><div><ul><li><span style="background-color: rgb(255, 250, 165);-evernote-highlight:true;">Hooke's law 胡克定律</span>  吸引<br/></li><li><span style="background-color: rgb(255, 250, 165);-evernote-highlight:true;">Coulomb's law 库仑定律</span>  排斥<br/></li></ul></div><div><br/></div><div>其他力：</div><div><ul><li>重力<br/></li></ul></div><div>类似于重力的力将顶点朝向绘图空间的固定点拉出;</div><div>这可以用于将不连续的图形的不同连接的部件拉在一起，否则由于排斥力而将趋向于彼此分开，</div><div>并且将具有较高中心性的节点绘制到图中的更多中心位置; </div><div>也可能影响单个组件中的顶点间距。</div><div><ul><li>磁场<br/></li></ul></div><div>磁场的类似物可用于定向图。</div><div>排斥力可以放置在边缘以及节点上，以避免最终图中的重叠或近似重叠。</div><div>在具有弯曲边缘（如圆弧或花键曲线）的图形中，力也可以放置在这些曲线的控制点上，例如提高其角度分辨率</div><div><br/></div><h2 style="text-align: start;"><span>Methods</span></h2><div>对于从理想长度与图形理论距离成正比的弹簧定义的力，应力主导化给出了一个非常好的行为（即<span style="background-color: rgb(255, 250, 165);-evernote-highlight:true;">单调收敛</span>）和数学优雅的方式来最小化这些差异，因此找到一个很好的布局为图。</div><div><br/></div><div>也可以采用<u>直接搜索能量最小值</u>的机制，而不是或与物理模拟结合使用。作为一般全局优化方法的例子的这样的机制包括<span style="background-color: rgb(255, 250, 165);-evernote-highlight:true;">模拟退火和遗传算法</span>。</div><div><br/></div><h2 style="text-align: start;"><span>Advantages</span></h2><div><ul><li>质量好的结果<br/></li></ul></div><div>至少对于中等尺寸（多达50-500个顶点）的图形，根据以下标准，获得的结果通常是非常好的结果：</div><div><ol><li>均匀边缘长度，<br/></li><li>均匀的顶点分布<br/></li><li>显示对称性。最后一个标准是最重要的标准之一，并且很难用任何其他类型的算法实现。<br/></li></ol></div><div><ul><li>灵活性<br/></li></ul></div><div>强制导向的算法可以轻松地适应和扩展，以达到额外的审美标准。这使得它们成为最通用的图形绘制算法。</div><div>现有扩展的示例包括有向图，3D图形绘图，[6]集群图形绘制，约束图形绘图和动态图形绘图。</div><div><ul><li>直观的<br/></li></ul></div><div>由于它们是基于普通物体的物理类比，如弹簧，算法的行为相对容易预测和理解。其他类型的图形绘制算法不是这样。</div><div><ul><li>简单<br/></li></ul></div><div>典型的力导向算法很简单，可以在几行代码中实现。其他类的图形绘制算法，如正交布局的算法通常会更多的涉及。</div><div><ul><li>互动<br/></li></ul></div><div>这类算法的另一个优点是交互方面。通过绘制图形的中间阶段，用户可以跟随图形的演变，看到它从一个混乱的混乱展开到一个好看的配置。</div><div>在一些交互式图形绘图工具中，用户可以将一个或多个节点拉出其平衡状态，并观察它们迁移回到位。这使它们成为动态和在线绘图系统的首选。</div><div><ul><li>强大的理论基础<br/></li></ul></div><div>虽然简单的特设强制导向算法通常出现在文献和实践中（因为它们相对容易理解），更有理由的方法开始获得牵引力。自20世纪30年代以来，统计学家一直在解决多维度量表（MDS）中的类似问题，物理学家在处理相关的身体问题方面也具有悠久的历史，因此存在非常成熟的方法。作为示例，如上所述，度量MDS的应力集中化方法可以应用于图形绘制。这被证明是单调收敛的。[5]单调收敛，算法在每次迭代中降低布局的压力或成本的属性是重要的，因为它保证布局最终将达到局部最小值并停止。阻尼计划导致算法停止，但不能保证达到真正的局部最小值。</div><div><br/></div><h2 style="text-align: start;"><span>Disadvantages</span></h2><div><ul><li>高运行时间<br/></li></ul></div><div>典型的力导向算法通常被认为具有等于O（n3）的运行时间，其中n是输入图的节点数。这是因为迭代次数估计为O（n），并且在每次迭代中，需要访问所有对节点并计算其相互排斥力。这与物理学中的N体问题有关。然而，由于排斥力在本质上是局部性的，因此图可以被分割成仅考虑相邻的顶点。用于确定大图形布局的算法使用的常用技术包括高维嵌入，[7]多层绘图和其他与N体模拟相关的方法。例如，基于Barnes-Hut模拟的方法FADE [8]可以提高每次迭代n * log（n）的运行时间。作为一个粗略的指导，在几秒钟内，可以用每个迭代技术标准n2绘制最多1,000个节点，每次迭代技术使用n * log（n）强制导向算法与多级方法结合时，可以绘制数百万个节点的图。[9]</div><div><ul><li>差的局部最小值<br/></li></ul></div><div>很容易看出，力导向算法以最小的能量产生图形，特别是总能量仅为局部最小值的图形。在许多情况下，发现的地方最小值可能远远低于全局最低水平，这意味着低质量的绘图。对于许多算法，特别是仅允许顶点的下坡移动的算法，最终结果可以受到初始布局的强烈影响，大多数情况下是随机生成的。随着图形顶点数量的增加，局部极小值的问题变得越来越重要。不同算法的组合应用有助于解决这个问题。[10]例如，使用Kamada-Kawai算法[11]快速生成合理的初始布局，然后使用Fruchterman-Reingold算法[12]来改善相邻节点的位置。实现全局最小化的另一种技术是使用多级方法。[13]</div><div><span><br/></span></div><div><span><br/></span></div><div><span><br/></span></div><div><span><br/></span></div><div><span><br/></span></div><div><span><br/></span></div><div><span><br/></span></div><div><span><br/></span></div></en-note>
]]></content><created>20170514T015521Z</created><updated>20170525T061107Z</updated><tag>second week</tag><note-attributes><latitude>30.2712512303846</latitude><longitude>120.1209264423728</longitude><altitude>9.546793937683105</altitude><author>xialuokecaocao@outlook.com</author><source>desktop.mac</source><reminder-order>0</reminder-order></note-attributes></note>
</en-export>
